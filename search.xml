<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[手机万才项目总结]]></title>
      <url>%2F2017%2F04%2F11%2F%E6%89%8B%E6%9C%BA%E4%B8%87%E6%89%8D%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[前言经过寒假的筹备，从开学（2017.2.19）正式编码，到校赛正式答辩（2017.4.5），大概 1 个半月的时间，同赵俊文一同开发了我的第一个完整的项目——「手机万才」。在完成这个项目的过程中，无论是技术上还是管理上，都遇到了不少问题，幸运的是，最终都克服了。虽然最终答辩的时候，发挥的不是很理想，但还是获得了三等奖（还是可以接受的）。现在做个小小的总结吧，为自己 1 个半月的忙碌做个交待，也为今后少走弯路。 技术代码规范在之前写小 demo 的时候，没有觉得代码规范的重要性，当项目稍微大了点的时候，必须强迫自己做好代码规范，不仅方便自己编码，也方便别人合作。 目录结构 ​ 可以粗略地按照功能分类 命名规范类和接口： 类名必须使用驼峰 命名规则 eg : BookReadPlanAdd 方法命名： 方法名是一个动词，采用大小写混合的方式，第一个单词首字母小写，其后单词的首字母大写 eg : public void getBookName(); 变量命名： 临时变量一般取名 i，j，k，m，n，一般用于整型；c，d，e，一般用于字符型。 ​ 变量命名也必须采用驼峰规则，但是首字母必须小写。eg : bookName 成员变量命名： 同变量命名，但不要在私有变量前添加「m」字样。 常量命名： 类常量的声明全部大写，单词间用下划线隔开。 eg ： static final int MIN_WIDTH = 4; layout 命名： 全部单词小写，单词间以下划线分割，并且使用名词或名词词组 来命名 id命名： 全部单词小写，单词间以下划线分割，并且使用名词词组，并且要求能够通过 id 直接理解当前组件要实现的功能。 eg ； @+id/book_name_show 资源命名： layout 中所使用的所有资源（drawable，style 等）命名必须以全部单词小写，以下划线分割。 规约方法： 一个方法最好不要超过 15 行，如果方法太长，说明当前方法业务逻辑已经非常复杂，最好进行拆分，确保一个方法只做一件事。 参数和返回值： 一个方法的参数尽量不要超过 4 个。 神秘的数： 代码中不允许出现单独的数字、字符，如果必须出现，则必须将它们按照含义封装为静态常量。 访问控制： 如果没有足够理由，不要把实例或者类变量声明为公有。 编码技巧 定制基类可以自己定制各种基类 BaseActivity 、BaseFragment、BaseAdapter，可以将常用的方法等封装到里面，如：界面跳转、Toast、抽象初始化方法 init() 等。 如果使用 ButterKnife ，则必须在基类中定义抽象的setMyContentView() ，让 ButtertKnife 与视图绑定，否则在子类中会出现控件绑定不成功的情况，具体代码如下： 12345678910private void initLayout() &#123; setMyContentView(); ButterKnife.bind(this); &#125; /** * 由子类进行重写 * 在该方法中，子类指定布局文件 */ public abstract void setMyContentView(); 子类中实现该抽象方法 1234@Override public void setMyContentView() &#123; setContentView(R.layout.activity_login); &#125; 写了这个后，onCreate() 方法便不用再写了，具体的初始化操作，可以放在 init() 方法中，理清代码逻辑。 资源调用图片： 通常的图片放入drawable 文件夹中，在不做屏幕适配的情况下，建议放入xhdpi或xxhdpi文件夹中，mipmap 文件夹中通常放图标。 颜色资源： colorPrimary 、colorPrimaryDark 、colorAccent 需要指定，很多地方可以直接配置。 字符串与尺寸资源： title 、subtitle 、body 、caption 、largebody 等都可以指定。 优秀的第三方库 筛选菜单库： compile &#39;com.github.dongjunkun:DropDownMenu:1.0.3&#39; 坑 需要在 values 文件夹下新建interger.xml 1234&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;resources&gt; &lt;integer name="drop_down_menu_animation_duration"&gt;200&lt;/integer&gt;&lt;/resources&gt; 黄油刀注解： compile files(&#39;libs/butterknife-7.0.1.jar&#39;) 告别findViewById() 图片加载库： compile files(&#39;libs/universal-image-loader-1.9.2_sources.jar&#39;) 广告栏： compile &#39;cn.bingoogolapple:bga-banner:2.1.7@aar&#39; 解析json： compile files(&#39;libs/gson-2.6.2.jar&#39;) 底部导航栏： compile &#39;com.ashokvarma.android:bottom-navigation-bar:1.2.0&#39; 圆形头像： compile &#39;de.hdodenhof:circleimageview:2.1.0&#39; 可以弹出菜单的FAB： 1234/***添加rfab需要添加三个依赖***/ compile &apos;com.github.wangjiegulu:AndroidBucket:1.0.4&apos; compile &apos;com.github.wangjiegulu:AndroidInject:1.0.6&apos; compile &apos;com.github.wangjiegulu:RapidFloatingActionButton:1.0.3&apos; 强劲的后端支持 BmobBmob 官网 查询官方文档，可以方便的实现很多功能，对于移动开发提供了很多便利。 最美的 Material Design 设计作为 Android 开发者，当然是要推崇 MD 设计了，大量运用 MD 组件，采用 MD 图标，使用 MD 推荐的颜色。Material Design 官网 管理技术方面很多都可以通过搜索引擎来解决，但是管理这东西，真的不容易。想起我们的视频在答辩前10分钟才完成，文档写的很简陋，ppt不符合服务外包比赛的方向，这都是导致我们成绩不理想的原因。以后再参加类似比赛，如何能在15分钟左右时间内尽可能的展现出「创新点」、「比赛要求」、「技术运用」等干货才是最重要的，而不是说「产品历程」等无关痛痒的东西。 后记总之，经过这次项目以及担任 leader 的经历，自己的技术得到了提高，管理方面也有了自己的一点见解。继续前行吧！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown 语法学习]]></title>
      <url>%2F2017%2F04%2F09%2FMarkdown-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[标题在 Markdown 中，你只需要在文本前面加上# ，通过设置# 的个数，来确定标题的级别 注意： # 与标题之间有一个空格 列表 文本1 文本2 文本3 只需要在文本前面加上- 、+ 、* 注意： - 与文本之间有一个空格 有序列表 文本1 文本2 文本3 只需要在文本前面加上1. 注意： 1. 与文本之间有一个空格 插入链接简书 格式为：[文本](链接) 插入图片格式为：![文本](图片链接) 插入下划线格式为：--- 引用 做自己喜欢的事 在文字前面加&gt; 粗体和斜体斜体 ：在文本前后各加一个* ，如：*文本* 粗体 ：在文本前后各加两个* ，如：**文本** 代码引用 单行代码引用：hello world 使用 ` 将语句包起来 多行代码引用： 123public static void main(String[] args)&#123; System.out.println("hello world");&#125; 使用 ``` 将语句包起来 博客中插入图片插入图片 暂时先不采用「图床」的方式，直接加载本地图片解决吧 结语这里只是暂时列出了几种最常用的 Markdown 语法，有一些高级语法，暂时还用不到，就先不写，等用到时再加以补充。以后写博客使用 Markdown + stormzhang 的排版标准来写，坚持下去，提高自己的写作能力。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[GitHub + Hexo 搭建个人博客]]></title>
      <url>%2F2017%2F04%2F08%2FGithub-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[前言寒假的时候就想搭个博客玩了，一直没有具体实施。现在终于花费了 1 天的时间撘成了，心情还是有点小激动。以后就会将一些技术方面的文章、学习心得放到这里，这里就会成为我的「技术小天地」，希望自己技术能力得到提高，写作能力也能有长足的进步吧。 步骤概览 环境配置 Hexo 的安装、部署 NexT 主题的配置 绑定域名（可选） 环境配置 Git 的安装与配置 Git 的下载地址 Node.js 的安装 Node.js 的下载地址 注册 GitHub 账号 GitHub 的官网 配置 SSH key Linux 与 Mac都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH 的。大家可以在终端（win 下在 Git Bash 里）输入 ssh ,如果出现以下提示证明你本机已经安装 SSH ，否则请自行安装 紧接着输入 ssh-keygen -t rsa ，指定 rsa 算法生成算法密钥，接着连续三个回车键（不需 要输入密码），然后会生成两个文件 id_ras 和 id_ras.pub ，而 id_ras 是密钥，id_ras.pub 是公钥。这两个文件默认分别在如下目录下生成： /c/Documents and Settings/username/.ssh 接着就是在 GitHub 上添加 SSH key ，相信大家会有办法的。 SSH key 添加成功后，输入ssh -T git@github.com 进行测试，如果出现以下提示证明添加成功了。 成功之后，我们就可以向 GitHub 提交代码，也可以部署我们的博客到 GitHub Page 上了。 搭建 GitHub Page 登录 GitHub 后，新建一个仓库。仓库名为 username.github.io username 为你自己的用户名，这是特殊的词法约定。 注意 ：仓库中必须有文件才可以访问，你可以先添加一个Readme文件 Hexo 的安装、部署Hexo 是一个简单、快速、强大的静态博客生成工具，支持 Markdown 格式。 这里是官方介绍 在任意一个盘符，新建「hexo」文件夹，比如我在D盘新建，作为 博客的文件夹。 打开 Git Bash ，运行 Hexo 安装命令 npm install -g hexo ps: 这里 npm(node package management) 在安装 Node.js 的时候已经默认安装 进入 hexo 目录下 cd D:/hexo 运行以下命令，Hexo 随后将自动在目标文件夹中国建立网站所需要的所有文件。 hexo init 搭建一个本地博客 hexo g 生成博客 hexo s 启动本地服务预览 hexo s -g 两者也可以合并起来 然后在浏览器中输入「localhost:4000」即可预览已生成的博客 NexT 主题的安装、配置原有的主题是landscape ，但是不一定符合所有人的喜好，可以更换主题，让自己的博客更具个性化，这里我选用了简洁大方的 NexT 主题，来打造我的博客，当然也有其他好看的主题，大家可以自行安装、配置。 一些 Hexo 博客主题推荐 NexT 主题安装配置 NexT 主题官方配置说明 注意： 其实按着官方配置说明没什么大问题，但又几个坑需要注意： _config 文件中修改的时候，注意加空格 写 Markdown 文件的时候，tag 、categories 的时候也一定要加空格，或者写成如下形式： 12345tag:- Java- Androidcategories:- Tech 设置logo 主题配置文件中 favicon: images/logo.png 添加评论 添加评论的话，不要用多说（快要关闭了），改用 disqus 添加阅读量 阅读量 设置 RSS 功能，需要下载插件 设置RSS 绑定域名（可选）作为一个技术博客，怎么能甘心依附于一个二级域名呢？去阿里云上买一个域名，添加解析，然后在自己的本地文件中也添加好解析，便大功告成，具体步骤可以参考这篇文章。 Hexo 博客绑定域名 后记大致功能就这样，只要善用搜索引擎，没有什么问题解决不了的。坚持下去，记录自己学习的点滴。 ###]]></content>
    </entry>

    
  
  
</search>

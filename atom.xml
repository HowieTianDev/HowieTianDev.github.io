<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HowieTian&#39;s Blog</title>
  <subtitle>Learn and live</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-21T16:43:37.530Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HowieTian</name>
    <email>howietiandev@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HelloWorld 社团一年总结</title>
    <link href="http://yoursite.com/2017/04/21/HelloWorld-%E7%A4%BE%E5%9B%A2%E4%B8%80%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/21/HelloWorld-社团一年总结/</id>
    <published>2017-04-21T15:25:30.000Z</published>
    <updated>2017-04-21T16:43:37.530Z</updated>
    
    <content type="html"><![CDATA[<p>时间过得真快，好像从去年当上 Android 组长，到现在要换届，真的只是一眨眼的功夫。但时间就是这样的，从自己出生到现在，何尝不是一眨眼的功夫呢？也许只有自己最清楚，自己这一年成长了多少，进步了多少。从大一的懵懵懂懂，学习课堂上的知识，到现在有选择性的逃课，做自己喜欢的事；由大一的有点放不开，到现在的乐观、开朗、脸皮超厚……谁知道我经历了什么（哈哈）。我想这就是成长，我喜欢这种感觉，也会慢慢变成自己心目中理想的模样。</p>
<p>好像是要说社团经历啊，按着时间线来吧。最初选择当 Android 组长的初衷，我还记得：有这个身份做驱动，快速提高自己的 Android 开发技术。大一的时候，确实我们社团 Android 学习的氛围几乎为 0 ，也没有系统的学习相关知识，Java 基础 和一些 Android 基础都不过关。于是在大一的那个暑假，我开始了恶补，学习了 Java 和 Android 的一些基础知识。同时，在那个暑假的时候，还给大二的同学布置了学习任务，每周还要收他们的学习汇报（大多数情况都是我主动去问他们要，wuwu~）。体会到了身为 Android 组长责任感，同时看到他们的学习进度，也会激励自己去学习，那时候主要看视频，也算是浅浅的入门了吧，不过只会敲 demo，对一些基础的知识有了了解。</p>
<p>暑假休息完，社团第一次开会，我记得王琦问我们「暑假干了什么？」那会感觉回答个问题都会有点紧张，感觉还是没有融入社团，那会王琦好像也有点「严肃」，或许是吧。不过现在，社长真是变了很多，从大一时见到她的少言寡语，到现在的整个人的提高，很有思想。说自己吧，就开会这件事，上学期的话，首先是招新的事，然后呢就是问 Android 组的学习情况，下学期基本上没啥事了，大部分是行政方面的。基本上每周一次的会议，坚持了整整两个学期，当真不容易。首先我们大二这波人，真的还不错，不说技术方面，这种责任感也是不容易的。主席团的三位领导也是很辛苦，都是责任感啊，上一届的社团办的很不错，「不要毁掉江山」可能是很大的驱动吧。</p>
<p>招新的话，我也不知道到底自己的选择是否正确，也不知道自己培养他们的方法是否合适，但我始终认为一条准则，真正想学的人，一定会自己找资源，找方法，主动找我求教的，这是最基础的自学能力。当然，我也尽量为他们提供了足够的资源与氛围，什么学习资料，要求他们一周在群里说一下本周总结（虽然慢慢地不做了），开会教他们一些基础的知识，尽量让他们少走弯路，当然也会告诉他们一些框架什么的，最后我给他们布置了一个做一个「阅读类 APP」的任务，如果他们能做出来，能力肯定能进步一大截。MVP + RxJava + Retrofit，再加上 Material Design 的设计，一定会给自己一个满意的交待的。不过，这个学期，由于自己也一直在忙，准备各种比赛，只开过一次会，我想还会最后再开一次吧。现在估计他们进度不会太好，最后开会的时候再和他们说一下吧。这算是一种遗憾吧，不过自己确实在忙的过程中提高了很多，不管是技术还是为人处事。</p>
<p>这个学期，我们社团的活动较少，没有怎么出去玩，去过浙工大一次（但没有看到所谓的小和山），看过次电影，出去聚过餐吧。以后活动还是要多一点，否则还是玩不到一块的。</p>
<p>社团的话，要做活动，摆摊是很重要的一部分，我自己对行政什么的不感兴趣，也没有怎么参与。只是听命令去摆摊就好了，不过我想着不要为了摆摊而摆摊，比如今天的「后续宣传」，真的没什么用，我们这个类型的沙龙，其实通过摆摊去听的真是没几个，也不需要多少人去听。或许是为了让同学知道我们社团办了这个活动，前期宣传是很重要的，但是后续宣传真是没啥用。就算有人知道了，到下个学期不就忘了吗？我们还是要宣传呀，只有摆摊人员干坐在那里。感觉，今年的摆摊没有大一的 Hackthon 的那种激情。</p>
<p>关于社团管理方面，现在我们的层级结构是 主席团 - &gt; 组长、部长 - &gt; 小干事。算是比较传统的架构吧，两头的结构我觉得没啥好变的，主要是中间这层，这个学期，每个组的都在自己的小圈子里学习。真正要做项目的时候，必然是很多组一起干的，前端、移动开发组不知道如何和后台交互，后台也不知道自己学的到底有什么用。希望下一届在技术部这块一定要好好想想，给干事们找活干。感觉还是需要一个技术部长，定义举行社团内的技术沙龙，各组长也可以去演讲，在这个氛围下，给真正想学技术的同学提供一条途径吧。在组长的就任仪式上，罗峡说过，「这个社团已经成为生活中不可缺少的一部分」，我想那是的为并没有这种感觉，主要是社团的 Android 技术氛围并不好，也没真正学到什么东西。而前端的大神很多，他也有机会得到更多交流和进步的机会。我想通过这种沙龙和项目活动，增强干事的社团归属感吧。不过，看似前景很不错，但真正执行起来还是有很多阻碍的。</p>
<p>社长，真是我很钦佩的一个人，可能在她身上能看到自己的一点影子吧。一点点的改变自己，一点点的成长，不过她在管理社团方面真是很棒。我的话，差选了，管理也真是一门学问呢。以后也努力提高吧。以后一定会在路上看到你打招呼的。哈哈。</p>
<p>忘了，作为 Android 组长，这个身份也让我认识了不少人，交了一些志同道合的朋友，给了我很多帮助。这些看不见的东西，我觉得可能是最重要的。</p>
<p>最后总结一下吧，一年的 Android 组长的身份，暑假学习、收学习汇报、招新、讲课、开会、摆摊、办活动、出去玩，大概就这样吧。总体来说，自己还是得到了很多，不知道给社团贡献了多少，给自己勉强打个 80 分吧。自己技术得到了提高，为人处事也有了一些进步，成长了不少。不后悔当这一年的 Android 组长。由于对社团管理没啥兴趣，还是想继续提高技术，所以我打算不留了。不过，社团的话，也可以留下我的名字，有什么需要帮忙的，我也一定会尽力去做的。</p>
<p>做自己喜欢的事 —— 生活就是这么简单。</p>
<p>田浩宇 2017.4.22</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间过得真快，好像从去年当上 Android 组长，到现在要换届，真的只是一眨眼的功夫。但时间就是这样的，从自己出生到现在，何尝不是一眨眼的功夫呢？也许只有自己最清楚，自己这一年成长了多少，进步了多少。从大一的懵懵懂懂，学习课堂上的知识，到现在有选择性的逃课，做自己喜欢的事
    
    </summary>
    
      <category term="生活随笔" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Android 回调机制理解</title>
    <link href="http://yoursite.com/2017/04/16/Android-%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/04/16/Android-回调机制理解/</id>
    <published>2017-04-16T12:11:40.000Z</published>
    <updated>2017-04-16T15:36:36.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常听什么「回调」啊，Android 框架里什么生命周期啊，各种监听事件啊，直白一点，各种带「on」的方法，都是「回调方法」，一直想了解，但是一直没理解清楚。现在参考了网上的一些例子，梳理一下。</p>
<p>PS：首先要清楚 Java 中接口的相关概念，其次要有一点「事件分发机制」的了解（暂时还没弄清楚，以后写博客总结）。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>A 类中定义一个方法，这个方法中用到一个接口变量和该接口中的方法，但这个接口中的抽象方法需要  B 类去实现，B类实现该方法后，它本身不会调用该方法，而是传递给 A 类，供 A 类调用，这种机制称为「回调」。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下面我们拿 button 的点击事件来分析模拟：</p>
<ol>
<li><p>首先，在 View 类中，找到<code>interface OnClickListener</code> ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">OnClickListener</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View var)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是定义的接口，然后还有对应的接口变量：<code>public OnClickListener mOnClickListener</code> 。</p>
</li>
<li><p>其次，在 View 类中我们能找到 <code>setOnClickListener(OnClickListener l)</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(!isClickable())&#123;</div><div class="line">    setClickable(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">  getListenerInfo().mOnClickListener = l;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法中，将 OnClickListener l 赋值给了 成员变量 mOnClickListener。</p>
</li>
<li><p>我们继续往下找，找到在 <code>performClick()</code> 方法中，执行了我们的<code>onClick()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;  </div><div class="line">     sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);  </div><div class="line">     ListenerInfo li = mListenerInfo;  </div><div class="line">     <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;  </div><div class="line">         playSoundEffect(SoundEffectConstants.CLICK);  </div><div class="line">         li.mOnClickListener.onClick(<span class="keyword">this</span>);  </div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是概念中所说的，A 类中接口变量调用抽象方法的方法，也就是 B 类回调 A 类的方法。</p>
</li>
<li><p>在某一个 Activity 中，实现 button 的点击事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> OnClickListener&#123; </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    <span class="comment">//做具体的操作</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里就将一个接口的实现类作为参数传入 View 类中的 <code>setOnClickListener()</code> 方法中，从而为 View 类中的 成员变量 <code>mOnCLickLisetener</code> 赋值。</p>
</li>
<li><p>接着就是在父类中，也就是 View 类中执行 onClick() 方法，为什么会在父类中执行该方法呢？这就要说到 Android 中的另一个重要的机制——「事件分发机制」。当我们手指触摸到手机屏幕，就一定会执行<code>dispatchTouchEvent(MotionEvent event)</code> 方法。（此处省略10000字）</p>
<p>简单点说就是：通过事件分发机制，最终调用了<code>performClick()</code> 方法，从而执行了<code>onClick()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!post(mPerformClick))&#123;</div><div class="line">  performClick();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="为什么要回调"><a href="#为什么要回调" class="headerlink" title="为什么要回调"></a>为什么要回调</h2><p>这里体现了<strong>Java</strong> 中的「万事万物皆为对象」的理念，我们需要将普通物体的特性抽象出来，共性之中又有特性，每种特性交由不同的情况处理，通过接口暴露的方法可以减少很多重复，代码更加优雅。</p>
<p>例如：Button 和 TextView 都继承于 View，在做点击事件时，点击的具体逻辑是不同的。我点Button 可能弹出一个 toast，而点击 TextView 弹出一个 Notifaction，这时候回调的好处就体现出来了，因为 Android 对外暴露了 onClickListener() 接口，里面要去具体实现 onClick() 方法，就在这我们就可以随意定制了。而 View 的话，不管你如何实现，它只负责调用 onClick() 方法。</p>
<p>这样，代码更加简洁，逻辑也更加清晰，也算多态的一种实现吧。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/devor/article/details/17883427" target="_blank" rel="external">Android 中的回调函数机制解析</a> </p>
<p><a href="http://blog.csdn.net/xsf50717/article/details/50520462" target="_blank" rel="external">android 中的回调</a></p>
<p><a href="http://www.jianshu.com/p/3f86b7949f20#" target="_blank" rel="external">Android 回调函数机制那点事</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常听什么「回调」啊，Android 框架里什么生命周期啊，各种监听事件啊，直白一点，各种带「on」的方法，都是「回调方法」，一直想了解，但
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java 接口深入理解</title>
    <link href="http://yoursite.com/2017/04/16/Java-%E6%8E%A5%E5%8F%A3%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/04/16/Java-接口深入理解/</id>
    <published>2017-04-16T11:43:50.000Z</published>
    <updated>2017-04-16T11:57:45.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直观印象"><a href="#直观印象" class="headerlink" title="直观印象"></a>直观印象</h3><ul>
<li>抽象方法的集合，是一种对行为的抽象</li>
<li>是一种程序之间的一种「协议」或者「规范」</li>
<li>实现「多态」的一种手段</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>接口本身不是「类」，我们不能实例化一个接口，如 <code>new Runnable()</code>  肯定是错误的，我们只能  new 它的实现类。</li>
<li>interface 的所有方法访问权限自动被声明<code>public</code> 及 <code>abstract</code>  。确切的说，只能声明为<code>public</code> 和 <code>abstract</code> 。 </li>
<li>接口中可以定义「成员变量」，或者说是不可变的常量，因为接口中的「成员变量」会自动变为<code>public static final</code> 。可以通过实现类名直接访问<code>ImplementClass.name</code> 。</li>
<li>接口中不存在实现的方法。</li>
<li>实现接口的<strong>非抽象类</strong> 必须要实现该接口的所有方法。抽象类可以不用实现。</li>
<li>不能使用<code>new</code> 操作符来实例化一个接口，但可以声明一个接口变量，该变量必须引用一个实现该接口的实现类。</li>
<li>实现多接口的时候一定要避免方法名的重复。</li>
</ul>
<h3 id="为什么要使用接口"><a href="#为什么要使用接口" class="headerlink" title="为什么要使用接口"></a>为什么要使用接口</h3><ol>
<li><p>接口是一种规范，一种「招牌」，便于查看，便于维护和拓展</p>
<p><em>知乎上详细的例子</em></p>
<p>接口就是个招牌。</p>
<p>比如说你今年放假出去杭州旅游，玩了一上午，你也有点饿了，突然看到前面有个店子，上面挂着KFC，然后你就知道今天中饭有着落了。</p>
<p>KFC就是接口，我们看到了这个接口，就知道这个店会卖炸鸡腿（实现接口）。</p>
<p>那么为神马我们要去定义一个接口涅，这个店可以直接卖炸鸡腿啊（直接写实现方法），是的，这个店可以直接卖炸鸡腿，但没有挂KFC的招牌，我们就不能直接简单粗暴的冲进去叫服务员给两个炸鸡腿了。</p>
<p>要么，我们就要进去问，你这里卖不卖炸鸡腿啊，卖不卖汉堡啊，卖不卖圣代啊（这就是反射）。很显然，这样一家家的问实在是非常麻烦（反射性能很差）。</p>
<p>要么，我们就要记住，中山路108号卖炸鸡，黄山路45号卖炸鸡（硬编码），很显然这样我们要记住的很多很多东西（代码量剧增），而且，如果有新的店卖炸鸡腿，我们也不可能知道（不利于扩展）。</p>
</li>
<li><p>接口实现多态</p>
<p><em>知乎上详细的例子</em> </p>
<p>接口的作用对于很多新手来说很不容易理解，我给大家举个例子。<br>接口只是一个规范，所以里面的方法都是空的。<br>假如我开了一个宠物粮店，声明所有宠物都可以来我这里买粮食，这就相当于一个接口，</p>
<p>public interface PetRestaurant {<br> public void buy();<br>}</p>
<p>当一只狗看到了，知道自己是宠物，所以它去实现这个接口<br>public class DogPet implements PetRestaurant {<br> @Override<br> public void buy() {<br>  System.out.println(“我是狗，我要买狗粮”);<br> }<br>}<br>当一只猫看到了，知道自己也是宠物，所以也去实现这个接口<br>public class CatPet implements PetRestaurant {<br> @Override<br> public void buy() {<br>  System.out.println(“我是猫，我要买猫粮”);<br> }</p>
<p>}<br>当狗和猫来我的店之前，我是不知道他们到底是什么，但是当他们来到我的店，我就知道一个要猫粮食，一个要狗粮食。因为他们都实现了 我这个接口，都可以买。下面这个类相当于一个接待顾客的类，即店小二，他接待所有实现了我这个宠物店接口的动物，传进来一个PetRestaurant 类型的宠物，注意，这个PetRestaurant 是接口<br>public class test {<br> public void buy(PetRestaurant pet)<br> {<br>  pet.buy();<br> }<br>}</p>
<p>好了，这个时候我这个老板出现了，我可以给他们卖粮食了，相当于测试类<br>public class Tests {<br> public static void main(String[] args) {<br>  PetRestaurant dog = new DogPet();  //实例化一个狗，相当于把狗顾客实例化<br>  PetRestaurant cat = new CatPet();//实例化一个猫，相当于把猫顾客实例化</p>
<p>  test t = new test();  //实例化一个店小二<br>  t.buy(cat);  //把猫交给店小二<br>  t.buy(dog); //把狗交给店小二<br> }</p>
<p>}<br>这样运行的结果就是<br>我是猫，我要买猫粮<br>我是狗，我要买狗粮</p>
<p>你知道吗，整个过程我这个店主其实根本不知道来的到底是猫是狗还是其他什么，我只要有一个店小二，把这些来的不知什么动物都全部交给店小二，店小二就知道怎么去卖了，因为这些狗啊猫啊都实现了我这个宠物店的接口，而店小二就负责接待所有实现了我这个接口的动物。这就有一个好处，假如明天来了一头小猪，只要它实现了我这个接口，我只管交给店小二处理就OK了，我这个店小二根本不需要变化，我这个店主也只需要实例化一下这个动物就OK<br>你想，假如没有接口，会怎么办，来一个猫，我要去创造一个猫，还要实例化，来一只狗，我要创建一只狗，同样要实例化，还要配备专门的店小二去接待，就会相当麻烦。</p>
</li>
</ol>
<h3 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h3><ol>
<li><p>语法层次</p>
<p>抽象类实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public abstract class Demo&#123;</div><div class="line">  abstract void method1();</div><div class="line">  </div><div class="line">  void method2()&#123;</div><div class="line">    // 可以实现</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">interface Demo&#123;</div><div class="line">  void method1();</div><div class="line">  void method2();</div><div class="line">  //不可以被实现</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽象类方式中，抽象类可以拥有任意范围的成员数据，同时也可以拥有自己的非抽象方法，但是接口方式中，它仅能够有静态、不能修改的成员数据（但是我们一般是不会在接口中使用成员数据），同时它所有的方法都必须是抽象的。在某种程度上来说，接口是抽象类的特殊化。</p>
<p> 对子类而言，它只能继承一个抽象类（这是java为了数据安全而考虑的），但是却可以实现多个接口。</p>
</li>
<li><p>设计层次</p>
<ul>
<li><p><strong>抽象层次不同</strong>  抽象类是对类抽象，而接口是对行为抽象。抽象类是对整个类整体抽象，包括属性、行为。但是接口只是对局部（行为）进行抽象。</p>
</li>
<li><p><strong>跨域不同</strong>  抽象类所跨域的是具有相似特点的类，而接口却可以跨域不同的类（即使没有相似特点）。我们知道抽象类是从子类发现公共部分，然后泛化成抽象类，子类继承该父类即可。但是接口不同，实现它的子类可以没有任何关系。例如：猫、狗可以抽象成一个动物类，具备叫的方法。鸟、飞机可以实现 fly 接口，但是鸟和飞机不能抽象成一个抽象类吧！</p>
</li>
<li><p><strong>设计层次不同</strong> </p>
<p> 对于抽象类，它是自上而下来设计的，我们要先知道子类才能抽象出父类。而接口则不同，它根本不需要知道子类的存在，只需要定制一个「规范」即可。例如，我们只有一个猫类在这，你抽象出一个动物类，就有点过了。但如果有一个猫类、一个狗类，这时候你可以抽象出他们的共同点成一个动物类！</p>
<p>对于接口，比如飞这个接口，我们根本不知道会有什么东西来实现这个飞接口，怎么实现也不得而知，我们要做的就是事前定义好飞的行为接口。</p>
<p>所以说：<strong>抽象类是自上而下设计的，而接口是自下而上设计的</strong> 。</p>
</li>
</ul>
</li>
</ol>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://www.zhihu.com/question/20111251" target="_blank" rel="external">知乎回答</a></li>
<li><a href="http://www.cnblogs.com/chenssy/p/3376708.html" target="_blank" rel="external">博客园回答</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;直观印象&quot;&gt;&lt;a href=&quot;#直观印象&quot; class=&quot;headerlink&quot; title=&quot;直观印象&quot;&gt;&lt;/a&gt;直观印象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;抽象方法的集合，是一种对行为的抽象&lt;/li&gt;
&lt;li&gt;是一种程序之间的一种「协议」或者「规范」&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>手机万才项目总结</title>
    <link href="http://yoursite.com/2017/04/11/%E6%89%8B%E6%9C%BA%E4%B8%87%E6%89%8D%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/11/手机万才项目总结/</id>
    <published>2017-04-11T13:40:33.000Z</published>
    <updated>2017-04-11T15:33:42.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经过寒假的筹备，从开学（2017.2.19）正式编码，到校赛正式答辩（2017.4.5），大概 1 个半月的时间，同赵俊文一同开发了我的第一个完整的项目——「手机万才」。在完成这个项目的过程中，无论是技术上还是管理上，都遇到了不少问题，幸运的是，最终都克服了。虽然最终答辩的时候，发挥的不是很理想，但还是获得了三等奖（还是可以接受的）。现在做个小小的总结吧，为自己 1 个半月的忙碌做个交待，也为今后少走弯路。</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>在之前写小 demo 的时候，没有觉得代码规范的重要性，当项目稍微大了点的时候，必须强迫自己做好代码规范，不仅方便自己编码，也方便别人合作。</p>
<ul>
<li><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5></li>
</ul>
<p><img src="/images/0411content.png" alt="content"></p>
<p>​    可以粗略地按照功能分类</p>
<ul>
<li><h5 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h5><p><strong>类和接口：</strong> 类名必须使用<strong>驼峰</strong> 命名规则    eg : BookReadPlanAdd</p>
<p><strong>方法命名：</strong> 方法名是一个动词，采用大小写混合的方式，第一个单词首字母小写，其后单词的首字母大写                      eg : public void getBookName();</p>
<p><strong>变量命名：</strong> 临时变量一般取名 i，j，k，m，n，一般用于整型；c，d，e，一般用于字符型。</p>
<p>​             变量命名也必须采用驼峰规则，但是首字母必须小写。eg : bookName </p>
<p><strong>成员变量命名：</strong> 同变量命名，但不要在私有变量前添加「m」字样。</p>
<p><strong>常量命名：</strong> 类常量的声明全部大写，单词间用下划线隔开。 eg ： static final int MIN_WIDTH = 4;</p>
<p><strong>layout 命名：</strong> 全部单词小写，单词间以下划线分割，并且使用名词或名词词组 来命名</p>
<p><strong>id命名：</strong> 全部单词小写，单词间以下划线分割，并且使用名词词组，并且要求能够通过 id 直接理解当前组件要实现的功能。 eg ； @+id/book_name_show</p>
<p><strong>资源命名：</strong> layout 中所使用的所有资源（drawable，style 等）命名必须以全部单词小写，以下划线分割。</p>
</li>
<li><h5 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h5><p><strong>方法：</strong> 一个方法最好不要超过 15 行，如果方法太长，说明当前方法业务逻辑已经非常复杂，最好进行拆分，确保一个方法只做一件事。</p>
<p><strong>参数和返回值：</strong> 一个方法的参数尽量不要超过 4 个。</p>
<p><strong>神秘的数：</strong> 代码中不允许出现单独的数字、字符，如果必须出现，则必须将它们按照含义封装为静态常量。</p>
<p><strong>访问控制：</strong> 如果没有足够理由，不要把实例或者类变量声明为公有。 </p>
</li>
</ul>
<h4 id="编码技巧"><a href="#编码技巧" class="headerlink" title="编码技巧"></a>编码技巧</h4><ul>
<li><h5 id="定制基类"><a href="#定制基类" class="headerlink" title="定制基类"></a>定制基类</h5><p>可以自己定制各种基类 BaseActivity 、BaseFragment、BaseAdapter，可以将常用的方法等封装到里面，如：界面跳转、Toast、抽象初始化方法 <code>init()</code>  等。</p>
<p>如果使用 ButterKnife ，则必须在基类中定义抽象的<code>setMyContentView()</code>  ，让 ButtertKnife 与视图绑定，否则在子类中会出现控件绑定不成功的情况，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">     setMyContentView();</div><div class="line">     ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 由子类进行重写</div><div class="line">  * 在该方法中，子类指定布局文件</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setMyContentView</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>子类中实现该抽象方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"> public void setMyContentView() &#123;</div><div class="line">   setContentView(R.layout.activity_login);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>写了这个后，<code>onCreate()</code> 方法便不用再写了，具体的初始化操作，可以放在 <code>init()</code> 方法中，理清代码逻辑。 </p>
</li>
<li><h5 id="资源调用"><a href="#资源调用" class="headerlink" title="资源调用"></a>资源调用</h5><p><strong>图片：</strong> 通常的图片放入<code>drawable</code> 文件夹中，在不做屏幕适配的情况下，建议放入<code>xhdpi</code>或<code>xxhdpi</code>文件夹中，<code>mipmap</code> 文件夹中通常放图标。</p>
<p><strong>颜色资源：</strong> <code>colorPrimary</code> 、<code>colorPrimaryDark</code> 、<code>colorAccent</code> 需要指定，很多地方可以直接配置。</p>
<p><strong>字符串与尺寸资源：</strong> <code>title</code> 、<code>subtitle</code> 、<code>body</code> 、<code>caption</code> 、<code>largebody</code> 等都可以指定。</p>
</li>
<li><p>优秀的第三方库</p>
<p><strong>筛选菜单库：</strong> <code>compile &#39;com.github.dongjunkun:DropDownMenu:1.0.3&#39;</code>  <strong>坑</strong> 需要在 <code>values</code> 文件夹下新建<code>interger.xml</code> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">"drop_down_menu_animation_duration"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>黄油刀注解：</strong> <code>compile files(&#39;libs/butterknife-7.0.1.jar&#39;)</code> 告别<code>findViewById()</code></p>
<p><strong>图片加载库：</strong> <code>compile files(&#39;libs/universal-image-loader-1.9.2_sources.jar&#39;)</code> </p>
<p><strong>广告栏：</strong> <code>compile &#39;cn.bingoogolapple:bga-banner:2.1.7@aar&#39;</code></p>
<p><strong>解析json：</strong> <code>compile files(&#39;libs/gson-2.6.2.jar&#39;)</code> </p>
<p><strong>底部导航栏：</strong> <code>compile &#39;com.ashokvarma.android:bottom-navigation-bar:1.2.0&#39;</code> </p>
<p><strong>圆形头像：</strong> <code>compile &#39;de.hdodenhof:circleimageview:2.1.0&#39;</code> </p>
<p><strong>可以弹出菜单的FAB：</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/***添加rfab需要添加三个依赖***/</div><div class="line">   compile &apos;com.github.wangjiegulu:AndroidBucket:1.0.4&apos;</div><div class="line">   compile &apos;com.github.wangjiegulu:AndroidInject:1.0.6&apos;</div><div class="line">   compile &apos;com.github.wangjiegulu:RapidFloatingActionButton:1.0.3&apos;</div></pre></td></tr></table></figure>
</li>
<li><h5 id="强劲的后端支持-Bmob"><a href="#强劲的后端支持-Bmob" class="headerlink" title="强劲的后端支持 Bmob"></a>强劲的后端支持 Bmob</h5><p><a href="http://www.bmob.cn/" target="_blank" rel="external">Bmob 官网</a> 查询官方文档，可以方便的实现很多功能，对于移动开发提供了很多便利。</p>
</li>
<li><h5 id="最美的-Material-Design-设计"><a href="#最美的-Material-Design-设计" class="headerlink" title="最美的 Material Design 设计"></a>最美的 Material Design 设计</h5><p>作为 Android 开发者，当然是要推崇 MD 设计了，大量运用 MD 组件，采用 MD 图标，使用 MD 推荐的颜色。<a href="https://material.io/" target="_blank" rel="external">Material Design 官网</a> </p>
</li>
</ul>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p>技术方面很多都可以通过搜索引擎来解决，但是管理这东西，真的不容易。想起我们的视频在答辩前10分钟才完成，文档写的很简陋，ppt不符合服务外包比赛的方向，这都是导致我们成绩不理想的原因。以后再参加类似比赛，如何能在15分钟左右时间内尽可能的展现出「创新点」、「比赛要求」、「技术运用」等干货才是最重要的，而不是说「产品历程」等无关痛痒的东西。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>总之，经过这次项目以及担任 leader 的经历，自己的技术得到了提高，管理方面也有了自己的一点见解。继续前行吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;经过寒假的筹备，从开学（2017.2.19）正式编码，到校赛正式答辩（2017.4.5），大概 1 个半月的时间，同赵俊文一同开发了我的第一
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法学习</title>
    <link href="http://yoursite.com/2017/04/09/Markdown-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/04/09/Markdown-语法学习/</id>
    <published>2017-04-09T02:55:12.000Z</published>
    <updated>2017-04-09T14:57:53.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在 Markdown 中，你只需要在文本前面加上<code>#</code> ，通过设置<code>#</code> 的个数，来确定标题的级别 </p>
<p><strong>注意：</strong> <code>#</code> 与标题之间有一个空格</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>文本1</li>
<li>文本2</li>
<li>文本3 </li>
</ul>
<p>只需要在文本前面加上<code>-</code> 、<code>+</code> 、<code>*</code> </p>
<p><strong>注意：</strong> <code>-</code> 与文本之间有一个空格</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>文本1</li>
<li>文本2</li>
<li>文本3</li>
</ol>
<p>只需要在文本前面加上<code>1.</code> </p>
<p><strong>注意：</strong> <code>1.</code> 与文本之间有一个空格</p>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p><a href="www.jianshu.com">简书</a></p>
<p>格式为：<code>[文本](链接)</code></p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>格式为：<code>![文本](图片链接)</code> </p>
<h3 id="插入下划线"><a href="#插入下划线" class="headerlink" title="插入下划线"></a>插入下划线</h3><p>格式为：<code>---</code> </p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>做自己喜欢的事</p>
</blockquote>
<p>在文字前面加<code>&gt;</code> </p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p><em>斜体</em> ：在文本前后各加一个<code>*</code> ，如：<code>*文本*</code> </p>
<p><strong>粗体</strong> ：在文本前后各加两个<code>*</code> ，如：<code>**文本**</code> </p>
<h3 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h3><ul>
<li>单行代码引用：<code>hello world</code>  使用 ` 将语句包起来</li>
<li>多行代码引用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">  System.out.println(<span class="string">"hello world"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 ``` 将语句包起来</p>
<h3 id="博客中插入图片"><a href="#博客中插入图片" class="headerlink" title="博客中插入图片"></a>博客中插入图片</h3><p><a href="http://www.qiuchengjia.cn/2016/06/07/%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E9%9F%B3%E4%B9%90%EF%BC%8C%E8%A7%86%E9%A2%91/" target="_blank" rel="external">插入图片</a></p>
<p>暂时先不采用「图床」的方式，直接加载本地图片解决吧</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这里只是暂时列出了几种最常用的 Markdown 语法，有一些高级语法，暂时还用不到，就先不写，等用到时再加以补充。以后写博客使用 Markdown + stormzhang 的排版标准来写，坚持下去，提高自己的写作能力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h3&gt;&lt;p&gt;在 Markdown 中，你只需要在文本前面加上&lt;code&gt;#&lt;/code&gt; ，通过设置&lt;code&gt;#&lt;/code&gt; 的个数，来确定标题的级
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>GitHub + Hexo 搭建个人博客</title>
    <link href="http://yoursite.com/2017/04/08/Github-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/04/08/Github-Hexo-搭建个人博客/</id>
    <published>2017-04-08T15:52:54.000Z</published>
    <updated>2017-04-10T04:38:57.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>寒假的时候就想搭个博客玩了，一直没有具体实施。现在终于花费了 1 天的时间撘成了，心情还是有点小激动。以后就会将一些技术方面的文章、学习心得放到这里，这里就会成为我的「技术小天地」，希望自己技术能力得到提高，写作能力也能有长足的进步吧。</p>
<h3 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h3><ul>
<li>环境配置</li>
<li>Hexo 的安装、部署</li>
<li>NexT 主题的配置</li>
<li>绑定域名（可选）</li>
</ul>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul>
<li><p>Git 的安装与配置 </p>
<p><a href="https://git-scm.com/download/" target="_blank" rel="external">Git 的下载地址</a> </p>
</li>
<li><p>Node.js 的安装</p>
<p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js 的下载地址</a> </p>
</li>
<li><p>注册 GitHub 账号</p>
<p><a href="https://github.com/" target="_blank" rel="external">GitHub 的官网</a> </p>
</li>
<li><p>配置 SSH key</p>
<p>Linux 与 Mac都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH 的。大家可以在终端（win 下在 Git Bash 里）输入 ssh ,如果出现以下提示证明你本机已经安装 SSH ，否则请自行安装</p>
<p><img src="/images/code0.png" alt="code0">  </p>
<p>紧接着输入 <code>ssh-keygen -t rsa</code> ，指定 rsa 算法生成算法密钥，接着连续三个回车键（不需    要输入密码），然后会生成两个文件 <strong>id_ras</strong> 和 <strong>id_ras.pub</strong> ，而 <strong>id_ras</strong> 是密钥，<strong>id_ras.pub</strong>  是公钥。这两个文件默认分别在如下目录下生成：</p>
<p><strong>/c/Documents and Settings/username/.ssh</strong>   </p>
<p>接着就是在 GitHub 上添加 SSH key ，相信大家会有办法的。</p>
<p>SSH key 添加成功后，输入<code>ssh -T git@github.com</code> 进行测试，如果出现以下提示证明添加成功了。</p>
<p><img src="/images/code1.png" alt="code1"></p>
<p>成功之后，我们就可以向 GitHub 提交代码，也可以部署我们的博客到 GitHub Page 上了。</p>
</li>
<li><p>搭建 GitHub Page</p>
<p>登录 GitHub 后，新建一个仓库。仓库名为 <strong>username.github.io</strong> username 为你自己的用户名，这是特殊的词法约定。</p>
<p><strong>注意</strong> ：仓库中必须有文件才可以访问，你可以先添加一个Readme文件</p>
</li>
</ul>
<h4 id="Hexo-的安装、部署"><a href="#Hexo-的安装、部署" class="headerlink" title="Hexo 的安装、部署"></a>Hexo 的安装、部署</h4><p>Hexo 是一个简单、快速、强大的静态博客生成工具，支持 Markdown 格式。</p>
<p><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">这里是官方介绍</a> </p>
<p>在任意一个盘符，新建「hexo」文件夹，比如我在D盘新建，作为 博客的文件夹。</p>
<ol>
<li><p>打开 Git Bash ，运行 Hexo 安装命令 <code>npm install -g hexo</code></p>
<p><em>ps:</em> 这里 npm(node package management) 在安装 Node.js 的时候已经默认安装</p>
</li>
<li><p>进入 hexo 目录下 <code>cd D:/hexo</code> </p>
<p>运行以下命令，Hexo 随后将自动在目标文件夹中国建立网站所需要的所有文件。</p>
<p><code>hexo init</code> </p>
</li>
<li><p>搭建一个本地博客</p>
<p><code>hexo g</code> 生成博客</p>
<p><code>hexo s</code> 启动本地服务预览</p>
<p><code>hexo s -g</code> 两者也可以合并起来</p>
<p>然后在浏览器中输入「localhost:4000」即可预览已生成的博客</p>
</li>
</ol>
<h4 id="NexT-主题的安装、配置"><a href="#NexT-主题的安装、配置" class="headerlink" title="NexT 主题的安装、配置"></a>NexT 主题的安装、配置</h4><p>原有的主题是<code>landscape</code> ，但是不一定符合所有人的喜好，可以更换主题，让自己的博客更具个性化，这里我选用了简洁大方的 NexT 主题，来打造我的博客，当然也有其他好看的主题，大家可以自行安装、配置。</p>
<p><a href="https://www.aswifter.com/2016/01/18/hexo-themes/" target="_blank" rel="external">一些 Hexo 博客主题推荐</a></p>
<p>NexT 主题安装配置</p>
<p><a href="http://theme-next.iissnan.com/theme-settings.html#tags-page" target="_blank" rel="external">NexT 主题官方配置说明</a></p>
<p><strong>注意：</strong> 其实按着官方配置说明没什么大问题，但又几个坑需要注意：</p>
<ul>
<li>_config 文件中修改的时候，注意加空格</li>
<li>写 Markdown 文件的时候，tag 、categories 的时候也一定要加空格，或者写成如下形式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tag:</div><div class="line">- Java</div><div class="line">- Android</div><div class="line">categories:</div><div class="line">- Tech</div></pre></td></tr></table></figure>
<ul>
<li>设置logo</li>
</ul>
<blockquote>
<p>主题配置文件中 <code>favicon: images/logo.png</code> </p>
</blockquote>
<ul>
<li><p>添加评论</p>
<p>添加评论的话，不要用多说（快要关闭了），改用 disqus </p>
</li>
<li><p>添加阅读量</p>
<p><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="external">阅读量</a></p>
</li>
<li><p>设置 RSS 功能，需要下载插件</p>
<p><a href="http://www.jianshu.com/p/264024768d03" target="_blank" rel="external">设置RSS</a></p>
</li>
</ul>
<h4 id="绑定域名（可选）"><a href="#绑定域名（可选）" class="headerlink" title="绑定域名（可选）"></a>绑定域名（可选）</h4><p>作为一个技术博客，怎么能甘心依附于一个二级域名呢？去阿里云上买一个域名，添加解析，然后在自己的本地文件中也添加好解析，便大功告成，具体步骤可以参考这篇文章。</p>
<p><a href="http://www.jianshu.com/p/cea41e5c9b2a" target="_blank" rel="external">Hexo 博客绑定域名</a> </p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>大致功能就这样，只要善用搜索引擎，没有什么问题解决不了的。坚持下去，记录自己学习的点滴。</p>
<p>### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;寒假的时候就想搭个博客玩了，一直没有具体实施。现在终于花费了 1 天的时间撘成了，心情还是有点小激动。以后就会将一些技术方面的文章、学习心得
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
